services:
  frontend:
    container_name: frontend
    image: frontend
    build: ./requirements/frontend
    ports:
      - 443:443
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - public-transcendence-network
      - private-transcendence-network
    volumes:
      - ./requirements/frontend:/app
      - ./requirements/frontend/static:/var/www/ft_transcendence/static
      - ./requirements/frontend/dist:/var/www/ft_transcendence/dist

  backend:
    container_name: backend
    image: backend
    build: ./requirements/backend
    ports:
      - 3000:3000
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - private-transcendence-network
    volumes:
      - ./requirements/backend:/app
      - backend_db:/app/data
      - node_modules:/app/node_modules # Prevents overwriting dependencies

  blockchain:
    container_name: blockchain
    image: blockchain
    build: ./requirements/blockchain
    env_file:
      - .env
    restart: "no"
    networks:
      - private-transcendence-network
    volumes:
      - ./requirements/blockchain:/app
      - ./requirements/blockchain/conf/output:/output
    secrets:
      - tournament_key

volumes:
  backend_db:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/backend_db
      o: bind
  blockchain_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/blockchain
      o: bind
  node_modules:
    # server_volume:
    #  driver: local
    #driver_opts:
    #  type: none
    #  device: ./requirements/server/public/
    #  o: bind

networks:
  public-transcendence-network:
    name: public-transcendence-network
    driver: bridge
  private-transcendence-network:
    name: private-transcendence-network
    driver: bridge

secrets:
  tournament_key:
    file: ../secrets/tournament_key
