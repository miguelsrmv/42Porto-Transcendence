// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  hashedPassword String
  salt           String   @default("")
  createdAt      DateTime @default(now())
  player         Player?
}

// TODO: Manage user online status somewhere else
// TODO: Add default avatar picture URL
model Player {
  id         String       @id @default(uuid())
  name       String?
  bio        String?
  avatarUrl  String?
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique
  friends    Friendship[] @relation("PlayerToFriends")
  friendOf   Friendship[] @relation("FriendsToPlayer")
  matches    Match[]      @relation("MatchPlayer1")
  matches2   Match[]      @relation("MatchPlayer2")
  matchesWon Match[]      @relation("MatchWinner")
}

model Friendship {
  id        String           @id @default(uuid())
  player    Player           @relation("PlayerToFriends", fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String
  friendOf  Player           @relation("FriendsToPlayer", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  status    FriendshipStatus @default(PENDING)

  @@unique([playerId, friendId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Match {
  id           String         @id @default(uuid())
  mode         MatchMode      @default(CLASSIC)
  duration     Int            @default(0)
  player1Id    String
  player1      Player         @relation("MatchPlayer1", fields: [player1Id], references: [id], onDelete: Cascade)
  player2Id    String
  player2      Player         @relation("MatchPlayer2", fields: [player2Id], references: [id], onDelete: Cascade)
  player1Score Int            @default(0)
  player2Score Int            @default(0)
  winnerId     String?
  winner       Player?         @relation("MatchWinner", fields: [winnerId], references: [id], onDelete: Cascade)
  // tournamentId String?
  // tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  roundNumber  Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  settings     MatchSettings?
}

enum MatchMode {
  CLASSIC
  CUSTOM
}

model MatchSettings {
  id            String  @id @default(uuid())
  match         Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId       String  @unique
  allowPowerUps Boolean @default(false)
  map           String?
  rounds        Int     @default(5)
  ballSpeed     Float   @default(1)
}
