# Using VScode extension REST Client (install it and click on 'Send Request' that appears above each request, separate requests with '###')

# Change 'http://localhost:3000/' to 'https://padaria.42.pt/api/' to test through Frontend container

### USER

### Get user by id
GET http://localhost:3000/users/<id> HTTP/1.1

### Get logged in user data
GET http://localhost:3000/users/me HTTP/1.1

### Check Login status
GET http://localhost:3000/users/checkLoginStatus HTTP/1.1

### Create a new user
POST http://localhost:3000/users/ HTTP/1.1
content-type: application/json

{
	"username": "newUser3",
	"email": "newUser2@gmail.com",
	"password": "secure123441",
	"repeatPassword": "secure123441"
}

### Update user info
PATCH http://localhost:3000/users HTTP/1.1
content-type: application/json

{
	"username": "modified",
	"email": "modified@gmail.com",
	"oldPassword": "password"
}

### Login user and get a JWT token
POST http://localhost:3000/users/login HTTP/1.1
content-type: application/json

{
	"email": "newUser2@gmail.com",
	"password": "secure123441"
}

### Check if user has 2FA enabled
POST http://localhost:3000/users/preLogin HTTP/1.1
content-type: application/json

{
	"email": "newUser2@gmail.com",
	"password": "secure123441"
}

### User login with 2FA
POST http://localhost:3000/users/login2FA HTTP/1.1
content-type: application/json

{
	"email": "newUser2@gmail.com",
	"password": "secure123441",
	"code": "325362"
}

### Logout user from browser
PATCH http://localhost:3000/users/logout HTTP/1.1

### Check a user's stats
GET http://localhost:3000/users/<id>/stats HTTP/1.1

### Checks if user enters valid token for 2FA
POST http://localhost:3000/users/2FA/verify HTTP/1.1
content-type: application/json

{
	"code": "2FAtoken",
  "password": "password"
}

### Check if user has 2FA enabled
GET http://localhost:3000/users/2FA/check HTTP/1.1

### Sets up 2FA for user
GET http://localhost:3000/users/2FA/setup HTTP/1.1

### Updates avatar image path to a default
PATCH http://localhost:3000/users/defaultAvatar HTTP/1.1
content-type: application/json

{
	"path": "default/avatar.png"
}

### Get user's avatar image path
GET http://localhost:3000/users/getAvatarPath HTTP/1.1
