include       mime.types;

server {

	listen 443 ssl;
	listen [::]:443 ssl;

	server_name $DOMAIN_NAME; 

	ssl_certificate  /etc/ssl/nginx-selfsigned.pem;
	ssl_certificate_key /etc/ssl/nginx-selfsigned.key;

	ssl_protocols TLSv1.2 TLSv1.3;

	root /var/www/ft_transcendence;
	index index.html;

	location / {
		try_files /static/index.html =404;
	}

	# WebSocket route FIRST (more specific match)
	location /ws {
		resolver 127.0.0.11 valid=10s;
    	proxy_pass http://backend:3000/ws;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";

		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

	}

	# All other /api requests
	location /api/ {
		resolver 127.0.0.11 valid=10s;
		rewrite ^/api/(.*)$ /$1 break;
    	proxy_pass http://backend:3000;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		add_header Access-Control-Allow-Origin https://padaria.42.pt always;
		add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
		add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;

		proxy_connect_timeout       1s;
		proxy_send_timeout          2s;
		proxy_read_timeout          2s;
		send_timeout                2s;
		if ($request_method = OPTIONS) {
			add_header Content-Length 0;
			add_header Content-Type text/plain;
			return 204;
		}

	}

	# Allow only relevant extensions
	location ~* \.(html|js|ico|css|png|jpg|otf|ttf|webp)$ {
		add_header Access-Control-Allow-Origin https://padaria.42.pt;
	}

	# TODO: Checkout this rule
	# Deny access to everything else
	#location ~* \.(?!html|ico|js|css).* {
	#    deny all;
	#}
}

